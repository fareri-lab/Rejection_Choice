grand_mean_gen_props_wFree <- mean(gen_props_means_wFree)
grand_mean_rew_props_wFree <- mean(rew_props_means_wFree)
# Now repeat the same procedure while w =0
# Initialize vectors to hold data
gen_props_means_w0 <- numeric(10)
rew_props_means_w0 <- numeric(10)
# Iterate many times--10 here, but would usually increase to at least 100
for (i in 1:10) {
# Apply the sim_choice function to each subset
splits = split(dat, dat$ID)
results = lapply(splits, function(subdat) sim_choice(c(mean_params[1],mean_params[2],0), subdat))
dat$sim_choices_w0 = unlist(results)
# Compute gen_props and rew_props
gen_props_w0 <- tapply(dat$sim_choices_w0, dat$ID, function(choices) {
length(which(choices == 2 | choices == 3)) / length(choices)
})
rew_props_w0 <- tapply(dat$sim_choices_w0, dat$ID, function(choices) {
length(which(choices == 1 | choices == 3)) / length(choices)
})
# Take the mean of gen_props and rew_props for this iteration
gen_props_means_w0[i] <- mean(gen_props_w0)
rew_props_means_w0[i] <- mean(rew_props_w0)
}
# Compute the grand means across all iterations
grand_mean_gen_props_w0 <- mean(gen_props_means_w0)
grand_mean_rew_props_w0 <- mean(rew_props_means_w0)
# Visualize the output
# Put means together in a data frame
sim_means <- data.frame(
Category = c("Chose Generous", "Chose Generous", "Chose Rewarding", "Chose Rewarding"),
Value = c(mean(grand_mean_gen_props_wFree), mean(grand_mean_gen_props_w0),
mean(grand_mean_rew_props_wFree), mean(grand_mean_rew_props_w0)),
Type = c("WFree", "W0", "WFree", "W0")
)
# Add data to previous plot of qualitative patterns in actual choice behavior
ggplot() +
geom_bar(data = data_means, aes(x = Category, y = Value), stat = "identity", width = 0.4,fill="lightblue") +
geom_point(data = sim_means, aes(x = Category, y = Value, color = Type), size = 3) +
geom_hline(yintercept = .5,linetype='dotted',)+
theme_minimal() +
labs(x = "Category", y = "Value", title = "Bar Plot of Means with Overlay Points") +
scale_fill_brewer(palette = "Set1") +
scale_color_manual(values = c("WFree" = "blue", "W0" = "red"))
# Create a function just like the simulation above, but outputting the total number of points a simulated subject earned in the task
sim_reward <- function(par, data)  {
# Extract parameters from input vector
alpha=par[1]
beta=par[2]
w=par[3]
# Set true feedback values used to give feedback to simulated subject
true_rv=c(40,20,40,20)
true_gv=c(.20,.40,.40,.20)
# Initialize expected value for each target
rv <- c(30,30,30,30)
g<-c(.30,.30,.30,.30)
# Loop through each trial and simulate choice
sim_reward <- foreach(t=seq_along(data$Chosen), .combine = "c") %do% {
# Extract reward value of each target (left, right)
rvLeft=rv[data$Left[t]]
rvRight=rv[data$Right[t]]
# Extract generosity of each target (left, right)
gLeft=g[data$Left[t]]
gRight=g[data$Right[t]]
# Convert generosity to an expected point value, using the mean of the point
# distribution (100 poitns)
gvLeft=gLeft*100
gvRight=gRight*100
# Construct overall expected value as weighted average of reward value and
# generosity-based value
evLeft = w*gvLeft+(1-w)*rvLeft
evRight=w*gvRight+(1-w)*rvRight
# Enter to softmax equation, getting probability of choosing the target on
# the left
pr <- softmax(evLeft,evRight,beta)
# Make choice
r=runif(1)
sim_choice=data$Left[t]*(r<=pr) + data$Right[t]*(r>pr)
# Generate reward based on simulated choice
sim_reward=round(true_rv[sim_choice]+rnorm(1,mean=0,sd=10))
sim_reward=ifelse(sim_reward < 1, 1, sim_reward)
sim_generosity=true_gv[sim_choice]+rnorm(1,mean=0,sd=.10)
sim_generosity=ifelse(sim_generosity<.01,.01,sim_generosity)
sim_generosity=ifelse(sim_generosity>.99,.99,sim_generosity)
# Update reward and generosity with delta-rule learning
rv[data$Chosen[t]] <- rv[data$Chosen[t]] + alpha * (sim_reward - rv[data$Chosen[t]])
g[data$Chosen[t]] <- g[data$Chosen[t]] + alpha * (sim_generosity - g[data$Chosen[t]])
sim_reward
}
as.numeric(sim_reward)
}
# Initialize vector for output
reward_sums=numeric(3)
# Apply this reward simulation function to each subset if w = 0
results_w0 = lapply(splits, function(subdat) sim_reward(c(mean_params[1],mean_params[2],
0), subdat))
reward_sums[1] <- mean(tapply(unlist(results_w0), dat$ID, sum)) # Average rewards across subjects
# Apply reward simulation if w = .5 (equal weighting of reward and generosity)
results_wEqual = lapply(splits, function(subdat) sim_reward(c(mean_params[1],mean_params[2],
.5), subdat))
reward_sums[2] <- mean(tapply(unlist(results_wEqual), dat$ID, sum))
# Apply reward simulation if w = 1
results_w1 = lapply(splits, function(subdat) sim_reward(c(mean_params[1],mean_params[2],
1), subdat))
reward_sums[3] <- mean(tapply(unlist(results_w1), dat$ID, sum))
names(reward_sums)=c("W_0","W_0.5","W_1")
reward_sums
library(ggplot2)
packageVersion("ggplot2")
library(lme4)
library(lmerTest)
getwd()
setwd("/Users/dfareri/Dropbox/Dominic/Github/fareri-lab/Rejection_Choice/")
data<-read.csv(file="longformdata_DF.csv",header=TRUE, sep=',')
getwd()
setwd("/Users/jordansiegel/Documents/Github/Rejection_Choice/")
data<-read.csv(file="longformdata_DF.csv",header=TRUE, sep=',')
short_data<-read.csv(file="shortformdata_DF.csv",header=TRUE,sep=",")
#recode variables so 0 = neutral, 1 = rejection, -1 = acceptance
#original coding: 0 = neutral, , 1 =rejection, 2 = acceptance
data$condition_recode[data$condition_recode==2]<- -1
unique(data$condition_recode)
#recode order from 12 (rejection first) to 0 and 21 (acceptance first) to 1
data$order[data$order==12]<-0
data$order[data$order==21]<-1
#convert missed trials from 999 to NA
data$playlottery[data$playlottery==999]<-NA
test<-lm(short_data$choice~short_data$condition_recode)
summary(test)
glmer1<-glmer(playlottery~condition_recode + age + sex + timebetween + order + (1|PROLIFIC_ID),family=binomial,data=data)
#recode order from 12 (rejection first) to 0 and 21 (acceptance first) to 1
data$order[data$order==12]<-0
data$order[data$order==21]<-1
#convert missed trials from 999 to NA
data$playlottery[data$playlottery==999]<-NA
test<-lm(short_data$choice~short_data$condition_recode)
summary(test)
glmer1<-glmer(playlottery~condition_recode + age + sex + timebetween + order + (1|PROLIFIC_ID),family=binomial,data=data)
glm4 <- glm(playlottery~recoded_stress*condition_recode + age + sex + timebetween + order,family=binomial,data=data)
summary(glm4)
glm1<-glm(playlottery~condition_recode + age + sex + timebetween + order,family=binomial,data=data)
summary(glm1)
View(glm5)
View(glm5)
summary(glm5)
summary(glm5)
summary(glm4)
summary(glm1)
summary(glm2)
summary(glm3)
summary(fit)
summary(lm)
summary(lm2)
summary(lm3)
library(sjPlot)
library(sjmisc)
library(sjlabelled)
library(sjstats)
plot_model(lm,type="pred")
plot_model(model=lm,type="pred")
plot_model(model=lm,type=c("pred"))
plot_model(model=lm,type="pred")
plot_model(model=lm)
plot_model(model=lm,type="int")
View(splits)
plot <- plot_model(model, type = "int",
title = "",
axis.title = c("Condition x Affect", "Likelihood to Share"),
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Interaction Effect",
legend.labels = c("Low", "High"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4)
plot <- plot_model(model=lm, type = "int",
title = "",
axis.title = c("Condition x Affect", "Likelihood to Share"),
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Interaction Effect",
legend.labels = c("Low", "High"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4)
plot_model(model=lm, type = "int",
title = "",
axis.title = c("Condition x Affect", "Likelihood to Share"),
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Interaction Effect",
legend.labels = c("Low", "High"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4)
plot_model(model=lm, type = "int",
title = "",
axis.title = c("Condition x Affect", "Likelihood to Share"),
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptane", "Rejection"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4)
plot_model(model=lm, type = "int",
title = "",
axis.title = c("Condition x Affect", "Likelihood to Share"),
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptane", "Rejection"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4)
plot_model(model=lm, type = "int",
title = "",
axis.title = c("Condition x Self-Reported Affect", "Likelihood to Share"),
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptance", "Rejection"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4)
plot_model(model=lm, type = "int",
title = "",
axis.title = c("Condition x Self-Reported Affect", "Likelihood to Share in Future"),
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptance", "Rejection"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4)
plot_model(model=lm, type = "int",
title = "",
axis.title = c("Self-Reported Affect", "Likelihood to Share in Future"),
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptance", "Rejection"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4)
plot_model(model=lm, type = "int",
title = "",
axis.title = c("Self-Reported Affect", "Likelihood to Share in Future"),
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptance", "Rejection"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4)
plot + theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank()
)
library(sjPlot)
library(ggplot2)
plot_model(model=lm, type = "int",
title = "",
axis.title = c("Self-Reported Affect", "Likelihood to Share in Future"),
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptance", "Rejection"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4)
plot + theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank()
)
plot_model(model=lm, type = "int",
title = "",
axis.title = c("Self-Reported Affect", "Likelihood to Share in Future"),
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptance", "Rejection"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4)
plot + theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank()
)
plot_model(model=lm, type = "int",
title = "",
axis.title = c("Self-Reported Affect", "Likelihood to Share in Future"),
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptance", "Rejection"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4)
plot_model() + theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank()
)
plot_model(model=lm, type = "int",
title = "",
axis.title = c("Self-Reported Affect", "Likelihood to Share in Future"),
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptance", "Rejection"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4)
plot_model(model=lm) + theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank()
)
plot_model(model=lm, type = "int",
title = "",
axis.title = c("Self-Reported Affect", "Likelihood to Share in Future"),
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptance", "Rejection"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4)
plot_model(model=lm, type = 'int'title = "",
plot_model(model=lm, type = "int",
title = "",
axis.title = c("Self-Reported Affect", "Likelihood to Share in Future"),
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptance", "Rejection"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4)
plot_model(model=lm, type = 'int', title = "",
axis.title = c("Self-Reported Affect", "Likelihood to Share in Future"),
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptance", "Rejection"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4)) + theme(
plot_model(model=lm, type = "int",
title = "",
axis.title = c("Self-Reported Affect", "Likelihood to Share in Future"),
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptance", "Rejection"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4)
plot_model(model=lm, type = 'int', title = "",
axis.title = c("Self-Reported Affect", "Likelihood to Share in Future"),
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptance", "Rejection"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4) + theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank()
)
plot_model(model=glm1,type=c("pred"),axis.title = c('Social Condition','Predicted Probability of Playing Lottery'),title='', colors = c("#0073C2FF", "#EFC000FF"),
+            legend.title = "Social Condition",
plot_model(glm1,type=c("pred"),axis.title = c('Social Condition','Predicted Probability of Playing Lottery'),title='', colors = c("#0073C2FF", "#EFC000FF"),
+            legend.title = "Social Condition",
plot_model(glm1,type=c("pred"),axis.title = c('Social Condition','Predicted Probability of Playing Lottery'),title='', colors = c("#0073C2FF", "#EFC000FF"),
+            legend.title = "Social Condition",
plot_model(glm1,type=c("pred"),
axis.title = c('Social Condition','Predicted Probability of Playing Lottery'),
title='',
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptance", "Rejection"),
show.values = TRUE,
value.offset = 0.4,value.size = 4, mrdt.values="meansd") + theme(
+     panel.background = element_blank(),
plot_model(glm1,type=c("pred"),
axis.title = c('Social Condition','Predicted Probability of Playing Lottery'),
title='',
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptance", "Rejection"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4,
mrdt.values="meansd") + theme(
+     panel.background = element_blank(),
plot_model(glm1,type=c("pred"),
axis.title = c('Social Condition','Predicted Probability of Playing Lottery'),
title='',
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptance", "Rejection"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4) + theme(
+     panel.background = element_blank(),
plot_model(glm1,type=c("pred"),
axis.title = c('Social Condition','Predicted Probability of Playing Lottery'),
title='',
colors = c("#0073C2FF", "#EFC000FF"),
legend.title = "Social Condition",
legend.labels = c("Acceptance", "Rejection"),
show.values = TRUE,
value.offset = 0.4,
value.size = 4) + theme(panel.background = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(),plot.background = element_blank()
)
plot_model(glm1, type = c("pred"),
axis.title = c('Social Condition', 'Predicted Probability of Playing Lottery'),
title = '',
colors = c("#0073C2FF", "#EFC000FF"),
mdrt.values = "meansd")
plot_model(glm1, type = "pred",
terms = "condition [all]", # This ensures all levels of 'condition' are considered
axis.title = c('Social Condition', 'Predicted Probability of Playing Lottery'),
title = '',
colors = c("#0073C2FF", "#EFC000FF"),
mdrt.values = "meansd")
plot_model(glm1, type = "pred",
terms = "condition [-1,1]", # This ensures all levels of 'condition' are considered
axis.title = c('Social Condition', 'Predicted Probability of Playing Lottery'),
title = '',
colors = c("#0073C2FF", "#EFC000FF"),
mdrt.values = "meansd")
plot_model(glm1, type = "pred",
terms = "condition_recode [-1,1]", # This ensures all levels of 'condition' are considered
axis.title = c('Social Condition', 'Predicted Probability of Playing Lottery'),
title = '',
colors = c("#0073C2FF", "#EFC000FF"),
mdrt.values = "meansd")
# Customize the plot further with ggplot2
plot + theme(
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank(),
legend.title = element_text(size = 10),
legend.text = element_text(size = 9)
) + scale_color_manual(values = c("Acceptance" = "#0073C2FF", "Rejection" = "#EFC000FF"))
plot_model(glm1,type=c("pred"),axis.title = c('Social Condition','Predicted Probability of Playing Lottery'),title='',colors=("circus"),mrdt.values="meansd")
plot_model(glm1,type=c("int"),axis.title = c('Social Condition','Predicted Probability of Playing Lottery'),title='',colors=("circus"),mrdt.values="meansd")
plot_model(glm5,type=c("pred"))
plot_model(glm1, type = "pred",
terms = "condition_recode", # Specifying the terms correctly
axis.title = c('Social Condition', 'Predicted Probability of Playing Lottery'),
title = '',
colors = c("#0073C2FF", "#EFC000FF"),
mdrt.values = "meansd")
plot_model(glm1, type = "pred",
terms = "condition_recode:recoded_stress", # Specifying the terms correctly
axis.title = c('Social Condition', 'Predicted Probability of Playing Lottery'),
title = '',
colors = c("#0073C2FF", "#EFC000FF"),
mdrt.values = "meansd")
plot_model(glm1, type = "pred",
terms = "condition_recode", "recoded_stress", # Specifying the terms correctly
axis.title = c('Social Condition', 'Predicted Probability of Playing Lottery'),
title = '',
colors = c("#0073C2FF", "#EFC000FF"),
mdrt.values = "meansd")
plot_model(glm1, type = "int",
terms = "condition_recode", "recoded_stress", # Specifying the terms correctly
axis.title = c('Social Condition', 'Predicted Probability of Playing Lottery'),
title = '',
colors = c("#0073C2FF", "#EFC000FF"),
mdrt.values = "meansd")
plot_model(glm5, type = "int",
terms = "condition_recode", "recoded_stress", # Specifying the terms correctly
axis.title = c('Social Condition', 'Predicted Probability of Playing Lottery'),
title = '',
colors = c("#0073C2FF", "#EFC000FF"),
mdrt.values = "meansd")
summary(glm5)
summary(glm4)
plot_model(glm4, type = "int",
terms = "condition_recode", "recoded_stress", # Specifying the terms correctly
axis.title = c('Social Condition', 'Predicted Probability of Playing Lottery'),
title = '',
colors = c("#0073C2FF", "#EFC000FF"),
mdrt.values = "meansd")
plot_model(glm4, type = "int",
axis.title = c('Social Condition', 'Predicted Probability of Playing Lottery'),
title = '',
colors = c("#0073C2FF", "#EFC000FF"),
mdrt.values = "meansd")
plot_model(glm4, type = "int", terms = condition_recode[-1.1],
axis.title = c('Social Condition', 'Predicted Probability of Playing Lottery'),
title = '',
colors = c("#0073C2FF", "#EFC000FF"),
mdrt.values = "meansd")
View(data)
plot_model(glm4, type = "int", terms = condition_recode[-1.1], recoded_stress
axis.title = c('Social Condition', 'Predicted Probability of Playing Lottery'),
plot_model(glm4, type = "int", terms = c("condition_recode[-1.1]", "recoded_stress")
axis.title = c('Social Condition', 'Predicted Probability of Playing Lottery'),
plot_model(glm4, type = "int", terms = c("condition_recode", "recoded_stress")
axis.title = c('Social Condition', 'Predicted Probability of Playing Lottery'),
plot_model(glm4, type = "int", terms = c("condition_recode", "recoded_stress"),
axis.title = c('Self-Reported Affect', 'Predicted Probability of Playing Lottery'),
title = '',
colors = c("#0073C2FF", "#EFC000FF"),
mdrt.values = "meansd")
filtered_data <- data %>% filter(condition_recode != 0)
filtered_data <- data %>% filter(condition_recode != "0")
View(short_data)
summary(glm1)
summary(glm2)
summary(glm3)
plot_model(model=glm3, type"pred")
plot_model(model=glm3, type = "pred")
View(data3)
