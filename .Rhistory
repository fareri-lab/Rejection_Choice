geom_line(size = 1.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40") +
geom_point(data = data.frame(
value_diff = c(pse_accept, pse_reject),
predicted_prob = 0.5,
condition_label = c("Acceptance", "Rejection")
), aes(x = value_diff, y = predicted_prob, color = condition_label),
size = 3, shape = 21, fill = "white") +
scale_color_manual(
values = c("Acceptance" = "#88CCEE",
"Rejection" = "#FF6F61")
) +
labs(
title = "",
x = "Value Difference",
y = "Probability of Social Choice",
color = "Condition"
) +
theme_classic(base_size = 14) +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 20, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 20, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16)
)
)
# Save the plot
ggsave("PSE_plot.png", PSE_plot, width = 6, height = 4, dpi = 300)
PSE_plot <- (
ggplot(pred_data, aes(x = value_diff, y = predicted_prob, color = condition_label)) +
geom_line(size = 1.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40") +
geom_point(data = data.frame(
value_diff = c(pse_accept, pse_reject),
predicted_prob = 0.5,
condition_label = c("Acceptance", "Rejection")
), aes(x = value_diff, y = predicted_prob, color = condition_label),
size = 3, shape = 21, fill = "white") +
scale_color_manual(
values = c("Acceptance" = "#88CCEE",
"Rejection" = "#FF6F61")
) +
labs(
title = "",
x = "Value Difference",
y = "Probability of Social Choice",
color = "Condition"
) +
theme_classic(base_size = 14) +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 20, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 20, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16),
axis.ticks.length = unit(4, "pt")  # Default is around 5–6 pt, go smaller if you want
)
)
# Save the plot
#ggsave("PSE_plot.png", PSE_plot, width = 6, height = 4, dpi = 300)
ggsave("PSE_plot_fixed.png", plot = PSE_plot, width = 10, height = 8, dpi = 300)
PSE_plot <- (
ggplot(pred_data, aes(x = value_diff, y = predicted_prob, color = condition_label)) +
geom_line(size = 1.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40") +
geom_point(data = data.frame(
value_diff = c(pse_accept, pse_reject),
predicted_prob = 0.5,
condition_label = c("Acceptance", "Rejection")
), aes(x = value_diff, y = predicted_prob, color = condition_label),
size = 3, shape = 21, fill = "white") +
scale_color_manual(
values = c("Acceptance" = "#88CCEE",
"Rejection" = "#FF6F61")
) +
labs(
title = "",
x = "Value Difference",
y = "Probability of Social Choice",
color = "Condition"
) +
theme_classic(base_size = 14) +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 22, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 22, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18),
axis.ticks.length = unit(6, "pt")  # Default is around 5–6 pt, go smaller if you want
)
)
# Save the plot
#ggsave("PSE_plot.png", PSE_plot, width = 6, height = 4, dpi = 300)
ggsave("PSE_plot_fixed.png", plot = PSE_plot, width = 10, height = 8, dpi = 300)
PSE_plot <- (
ggplot(pred_data, aes(x = value_diff, y = predicted_prob, color = condition_label)) +
geom_line(size = 1.2) +
geom_vline(xintercept = 0, linetype = "dashed", color = "gray40") +
geom_point(data = data.frame(
value_diff = c(pse_accept, pse_reject),
predicted_prob = 0.5,
condition_label = c("Acceptance", "Rejection")
), aes(x = value_diff, y = predicted_prob, color = condition_label),
size = 3, shape = 21, fill = "white") +
scale_color_manual(
values = c("Acceptance" = "#88CCEE",
"Rejection" = "#FF6F61")
) +
labs(
title = "",
x = "Value Difference",
y = "Probability of Social Choice",
color = "Condition"
) +
theme_classic(base_size = 14) +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 22, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 22, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 20,face = "bold"),
axis.text.y = element_text(size = 20,face = "bold"),
legend.title = element_text(size = 20,face = "bold"),
legend.text = element_text(size = 18,face = "bold"),
axis.ticks.length = unit(6, "pt")  # Default is around 5–6 pt, go smaller if you want
)
)
# Save the plot
#ggsave("PSE_plot.png", PSE_plot, width = 6, height = 4, dpi = 300)
ggsave("PSE_plot_fixed.png", plot = PSE_plot, width = 10, height = 8, dpi = 300)
# Create the Bar Plot with Correct SEM-based Error Bars
ggplot(summary_data, aes(x = Choice_Type, y = mean_prop, fill = Choice_Type)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", alpha = 0.9) +  # Bars with outline
geom_errorbar(aes(ymin = mean_prop - sem, ymax = mean_prop + sem),
width = 0.1, position = position_dodge(.9), color = "black", size = 0.8) +  # Corrected SEM error bars
scale_fill_manual(name = "Choice Type", values = c("Social" = "#FF6F61", "Non-Social" = "#88CCEE")) +  # Custom colors
labs(
x = "Choice Type",
y = "Proportion of Choices",
title = ""
) +
theme_minimal()+
theme(panel.grid = element_blank(),
axis.title.x = element_text(size = 20, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 20, face = "bold", margin = margin(t = 25)),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
legend.title = element_text(size = 18),
legend.text = element_text(size = 16))
# Create the Bar Plot with Correct SEM-based Error Bars
ggplot(summary_data, aes(x = Choice_Type, y = mean_prop, fill = Choice_Type)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", alpha = 0.9) +  # Bars with outline
geom_errorbar(aes(ymin = mean_prop - sem, ymax = mean_prop + sem),
width = 0.1, position = position_dodge(.9), color = "black", size = 0.8) +  # Corrected SEM error bars
scale_fill_manual(name = "Choice Type", values = c("Social" = "#FF6F61", "Non-Social" = "#88CCEE")) +  # Custom colors
labs(
x = "Choice Type",
y = "Proportion of Choices",
title = ""
) +
theme_minimal()+
theme(panel.grid = element_blank(),
axis.title.x = element_text(size = 22, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 22, face = "bold", margin = margin(t = 25)),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18))
# Save the plot
#ggsave("social_vs_nonsocial_choices_fixed.png", width = 8, height = 6, dpi = 300)
ggsave("social_vs_nonsocial_choices_fixed.png", plot = PSE_plot, width = 10, height = 8, dpi = 300)
# Create the Bar Plot with Correct SEM-based Error Bars
propsoc_choicetype <- ggplot(summary_data, aes(x = Choice_Type, y = mean_prop, fill = Choice_Type)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", alpha = 0.9) +  # Bars with outline
geom_errorbar(aes(ymin = mean_prop - sem, ymax = mean_prop + sem),
width = 0.1, position = position_dodge(.9), color = "black", size = 0.8) +  # Corrected SEM error bars
scale_fill_manual(name = "Choice Type", values = c("Social" = "#FF6F61", "Non-Social" = "#88CCEE")) +  # Custom colors
labs(
x = "Choice Type",
y = "Proportion of Choices",
title = ""
) +
theme_minimal()+
theme(panel.grid = element_blank(),
axis.title.x = element_text(size = 22, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 22, face = "bold", margin = margin(t = 25)),
axis.text.x = element_text(size = 20),
axis.text.y = element_text(size = 20),
legend.title = element_text(size = 20),
legend.text = element_text(size = 18))
# Save the plot
#ggsave("social_vs_nonsocial_choices_fixed.png", width = 8, height = 6, dpi = 300)
ggsave("social_vs_nonsocial_choices_fixed.png", plot = propsoc_choicetype, width = 10, height = 8, dpi = 300)
# Create the Bar Plot with Correct SEM-based Error Bars
propsoc_choicetype <- ggplot(summary_data, aes(x = Choice_Type, y = mean_prop, fill = Choice_Type)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", alpha = 0.9) +  # Bars with outline
geom_errorbar(aes(ymin = mean_prop - sem, ymax = mean_prop + sem),
width = 0.1, position = position_dodge(.9), color = "black", size = 0.8) +  # Corrected SEM error bars
scale_fill_manual(name = "Choice Type", values = c("Social" = "#FF6F61", "Non-Social" = "#88CCEE")) +  # Custom colors
labs(
x = "Choice Type",
y = "Proportion of Choices",
title = ""
) +
theme_minimal()+
theme(panel.grid = element_blank(),
axis.title.x = element_text(size = 22, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 22, face = "bold", margin = margin(t = 25)),
axis.text.x = element_text(size = 20,face = "bold"),
axis.text.y = element_text(size = 20,face = "bold"),
legend.title = element_text(size = 20,face = "bold"),
legend.text = element_text(size = 18, face = "bold"))
ggsave("social_vs_nonsocial_choices_fixed.png", plot = propsoc_choicetype, width = 10, height = 8, dpi = 300)
# Create the Bar Plot with Correct SEM-based Error Bars
propsoc_choicetype <- ggplot(summary_data, aes(x = Choice_Type, y = mean_prop, fill = Choice_Type)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", alpha = 0.9) +  # Bars with outline
geom_errorbar(aes(ymin = mean_prop - sem, ymax = mean_prop + sem),
width = 0.1, position = position_dodge(.9), color = "black", size = 0.8) +  # Corrected SEM error bars
scale_fill_manual(name = "Choice Type", values = c("Social" = "#FF6F61", "Non-Social" = "#88CCEE")) +  # Custom colors
labs(
x = "Choice Type",
y = "Proportion of Choices",
title = ""
) +
theme_minimal()+
theme(panel.grid = element_blank(),
axis.title.x = element_text(size = 22, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 22, face = "bold", margin = margin(t = 30)),
axis.text.x = element_text(size = 20,face = "bold"),
axis.text.y = element_text(size = 20,face = "bold"),
legend.title = element_text(size = 20,face = "bold"),
legend.text = element_text(size = 18, face = "bold"))
# Save the plot
#ggsave("social_vs_nonsocial_choices_fixed.png", width = 8, height = 6, dpi = 300)
ggsave("social_vs_nonsocial_choices_fixed.png", plot = propsoc_choicetype, width = 10, height = 8, dpi = 300)
# Create the Bar Plot with Correct SEM-based Error Bars
propsoc_choicetype <- ggplot(summary_data, aes(x = Choice_Type, y = mean_prop, fill = Choice_Type)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", alpha = 0.9) +  # Bars with outline
geom_errorbar(aes(ymin = mean_prop - sem, ymax = mean_prop + sem),
width = 0.1, position = position_dodge(.9), color = "black", size = 0.8) +  # Corrected SEM error bars
scale_fill_manual(name = "Choice Type", values = c("Social" = "#FF6F61", "Non-Social" = "#88CCEE")) +  # Custom colors
labs(
x = "Choice Type",
y = "Proportion of Choices",
title = ""
) +
theme_minimal()+
theme(panel.grid = element_blank(),
axis.title.x = element_text(size = 22, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 22, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 20,face = "bold"),
axis.text.y = element_text(size = 20,face = "bold"),
legend.title = element_text(size = 20,face = "bold"),
legend.text = element_text(size = 18, face = "bold")),
# Create the Bar Plot with Correct SEM-based Error Bars
propsoc_choicetype <- ggplot(summary_data, aes(x = Choice_Type, y = mean_prop, fill = Choice_Type)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", alpha = 0.9) +  # Bars with outline
geom_errorbar(aes(ymin = mean_prop - sem, ymax = mean_prop + sem),
width = 0.1, position = position_dodge(.9), color = "black", size = 0.8) +  # Corrected SEM error bars
scale_fill_manual(name = "Choice Type", values = c("Social" = "#FF6F61", "Non-Social" = "#88CCEE")) +  # Custom colors
labs(
x = "Choice Type",
y = "Proportion of Choices",
title = ""
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 22, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 22, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 20, face = "bold"),
axis.text.y = element_text(size = 20, face = "bold"),
legend.title = element_text(size = 20, face = "bold"),
legend.text = element_text(size = 18, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
)
# Save the plot
ggsave("social_vs_nonsocial_choices_fixed.png", plot = propsoc_choicetype, width = 10, height = 8, dpi = 300)
# Plot: Amount Spent on Social by Condition
amtspent <- ggplot(summary_data, aes(x = condition_recode, y = mean_spent, fill = condition_recode)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", alpha = 0.8) +
geom_errorbar(aes(ymin = mean_spent - sd_spent, ymax = mean_spent + sd_spent),
width = 0.1, position = position_dodge(.9), color = "black", size = 0.8) +
scale_fill_manual(name = "Condition", values = c("Rejection" = "#FF6F61", "Acceptance" = "#88CCEE")) +
labs(
x = "Social Condition",
y = "Amount Spent on Social"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 22, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 22, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 20, face = "bold"),
axis.text.y = element_text(size = 20, face = "bold"),
legend.title = element_text(size = 20, face = "bold"),
legend.text = element_text(size = 18, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
)
# Save the plot
ggsave("avgspent_social_rejvacc_plot_fixed.png", plot = amtspent, width = 10, height = 8, dpi = 300)
# Function to calculate Standard Deviation safely
safe_sd <- function(x) {
if (length(na.omit(x)) > 1) {
return(sd(x, na.rm = TRUE))
} else {
return(NA)
}
}
# ✅ Correct Filtering: Rejection = 1, Acceptance = -1
rej_long <- wtp_rej_longdata %>% filter(condition_recode == 1)   # Rejection
acc_long <- wtp_rej_longdata %>% filter(condition_recode == -1)  # Acceptance
# Compute Mean Decision Price for Each Condition
mean_data <- wtp_rej_longdata %>%
group_by(condition_recode) %>%
summarise(
mean_spent = mean(social_decisionprice_mean, na.rm = TRUE),
.groups = "drop"
)
# Compute SD separately for Rejection and Acceptance
sd_rej <- safe_sd(rej_long$social_decisionprice_mean)
sd_acc <- safe_sd(acc_long$social_decisionprice_mean)
# ✅ Debugging: Ensure SDs exist
print(paste("SD for Rejection:", sd_rej))
print(paste("SD for Acceptance:", sd_acc))
# ✅ Assign SD values correctly
summary_data <- mean_data %>%
mutate(
sd_spent = c(sd_rej, sd_acc),  # ✅ Correct order of SD assignment
condition_recode = factor(condition_recode, levels = c(1, -1), labels = c("Rejection", "Acceptance"))  # ✅ Correct ordering
)
# ✅ Debugging: Check if both conditions appear
print(summary_data)
# Plot: Amount Spent on Social by Condition
amtspent <- ggplot(summary_data, aes(x = condition_recode, y = mean_spent, fill = condition_recode)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black", alpha = 0.8) +
geom_errorbar(aes(ymin = mean_spent - sd_spent, ymax = mean_spent + sd_spent),
width = 0.1, position = position_dodge(.9), color = "black", size = 0.8) +
scale_fill_manual(name = "Condition", values = c("Rejection" = "#FF6F61", "Acceptance" = "#88CCEE")) +
labs(
x = "Social Condition",
y = "Amount Spent on Social"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 22, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 22, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 20, face = "bold"),
axis.text.y = element_text(size = 20, face = "bold"),
legend.title = element_text(size = 20, face = "bold"),
legend.text = element_text(size = 18, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
)
# Save the plot
ggsave("avgspent_social_rejvacc_plot_fixed.png", plot = amtspent, width = 10, height = 8, dpi = 300)
library(lme4)
library(lmerTest)
library(dplyr)
library(ggplot2)
library(scales)
library(dplyr)
library(tidyr)  # For drop_na()
getwd()
setwd("/Users/jordansiegel/Documents/Github/Rejection_Choice/")
data<-read.csv(file="longformdata_DF.csv",header=TRUE, sep=',')
short_data<-read.csv(file="shortformdata_DF.csv",header=TRUE,sep=",")
#recode variables so 0 = neutral, 1 = rejection, -1 = acceptance
#original coding: 0 = neutral, , 1 =rejection, 2 = acceptance
data$condition_recode[data$condition_recode==2]<- -1
unique(data$condition_recode)
#recode order from 12 (rejection first) to 0 and 21 (acceptance first) to 1
data$order[data$order==12]<-0
data$order[data$order==21]<-1
#convert missed trials from 999 to NA
data$playlottery[data$playlottery==999]<-NA
rej <- data %>% filter(condition_recode == 1)
acc <- data %>% filter(condition_recode == -1)
# Median split for 'rej' based on 'recoded_stress'
median_value_rej <- median(rej$recoded_stress, na.rm = TRUE)
rej <- rej %>%
mutate(Group = ifelse(recoded_stress > median_value_rej, "Rej_Pos", "Rej_Neg"))
# Print result
print(rej)
# Median split for 'acc' based on 'recoded_stress'
median_value_acc <- median(acc$recoded_stress, na.rm = TRUE)
acc <- acc %>%
mutate(Group = ifelse(recoded_stress > median_value_acc, "Acc_Pos", "Acc_Neg"))
# Print result
print(acc)
# Step 1: Compute the overall median of recoded_stress
overall_median_stress <- median(data$recoded_stress, na.rm = TRUE)
# Step 2: Create binary affect group based on median
data_withbins <- data %>%
mutate(
Group = case_when(
recoded_stress > overall_median_stress ~ "Positive",
recoded_stress <= overall_median_stress ~ "Negative",
TRUE ~ NA_character_
)
) %>%
drop_na(Group)
# Step 3: Create prediction dataset with *labeled* condition
data_new <- expand.grid(
Group = c("Negative", "Positive"),
condition_recode = c("Rejection", "Acceptance"),
age = mean(data_withbins$age, na.rm = TRUE),
sex = mean(data_withbins$sex, na.rm = TRUE),
timebetween = mean(data_withbins$timebetween, na.rm = TRUE),
order = mean(data_withbins$order, na.rm = TRUE)
)
# Step 4: Add median stress values for each group
group_medians <- data_withbins %>%
group_by(Group) %>%
summarise(recoded_stress = median(recoded_stress, na.rm = TRUE), .groups = "drop")
data_new <- left_join(data_new, group_medians, by = "Group")
# Step 5: Prepare numeric version of condition_recode for model
data_new$condition_numeric <- ifelse(data_new$condition_recode == "Acceptance", -1, 1)
# Step 6: Predict from GLM model
pred <- predict(glm4, newdata = data_new %>%
mutate(condition_recode = condition_numeric),
type = "link", se.fit = TRUE)
# Step 7: Add predictions and CIs to data_new
data_new$predicted_prob <- plogis(pred$fit)
data_new$lower_ci <- plogis(pred$fit - 1.96 * pred$se.fit)
data_new$upper_ci <- plogis(pred$fit + 1.96 * pred$se.fit)
# Step 8: Ensure correct factor levels for plotting
data_new$condition_recode <- factor(data_new$condition_recode, levels = c("Rejection", "Acceptance"))
data_new$Group <- factor(data_new$Group, levels = c("Negative", "Positive"))
# Step 9: Plot
problottery <- ggplot(data_new, aes(x = Group, y = predicted_prob, fill = condition_recode)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.9), color = "black") +
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci),
position = position_dodge(width = 0.9), width = 0.2, color = "black") +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
scale_fill_manual(values = c("Rejection" = "#FF6F61", "Acceptance" = "#88CCEE")) +
labs(
x = "Self-Reported Affect",
y = "Probability of Playing Lottery",
fill = "Condition"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 22, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 22, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 20, face = "bold"),
axis.text.y = element_text(size = 20, face = "bold"),
legend.title = element_text(size = 20, face = "bold"),
legend.text = element_text(size = 18, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
)
# Step 10: Save
ggsave("interaction_barplot.png", plot = problottery, width = 10, height = 8, dpi = 300)
# Create Prediction Dataset (Keep condition_recode Numeric)
data_new <- expand.grid(
Group = c("Negative", "Positive"),
condition_recode = c(-1, 1),  # Keep numeric
age = mean(data_withbins$age, na.rm = TRUE),
sex = mean(data_withbins$sex, na.rm = TRUE),
order = mean(data_withbins$order, na.rm = TRUE)
)
# Compute Group Medians Once and Merge
group_medians <- data_withbins %>%
group_by(Group) %>%
summarise(recoded_stress = median(recoded_stress, na.rm = TRUE), .groups = "drop")
data_new <- left_join(data_new, group_medians, by = "Group")
# Predict Values from `lm()` Model
pred <- predict(lm(salience_mean ~ recoded_stress * condition_recode + age + sex + order, data = data),
newdata = data_new, se.fit = TRUE)
# Add Predictions and Confidence Intervals
data_new <- data_new %>%
mutate(
predicted_salience = pred$fit,
lower_ci = pred$fit - 1.96 * pred$se.fit,
upper_ci = pred$fit + 1.96 * pred$se.fit
)
# Convert condition_recode to Factor AFTER Predictions (For Plotting)
# 👇 This is the only change: reversal of level order
data_new$condition_recode <- factor(data_new$condition_recode,
levels = c(1, -1),
labels = c("Rejection", "Acceptance"))
# Plot
futureint <- ggplot(data_new, aes(x = Group, y = predicted_salience, fill = condition_recode)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black") +
geom_errorbar(aes(ymin = lower_ci, ymax = upper_ci),
position = position_dodge(width = 0.9), width = 0.2, color = "black") +
labs(
x = "Self-Reported Affect",
y = "Likelihood of Future Interaction",
fill = "Condition"
) +
theme_minimal() +
theme(
panel.grid = element_blank(),
axis.title.x = element_text(size = 22, face = "bold", margin = margin(t = 25)),
axis.title.y = element_text(size = 22, face = "bold", margin = margin(r = 25)),
axis.text.x = element_text(size = 20, face = "bold"),
axis.text.y = element_text(size = 20, face = "bold"),
legend.title = element_text(size = 20, face = "bold"),
legend.text = element_text(size = 18, face = "bold"),
plot.margin = margin(t = 20, r = 20, b = 20, l = 30)
) +
scale_fill_manual(values = c("Acceptance" = "#88CCEE", "Rejection" = "#FF6F61"))
# Save with matching dimensions
ggsave("lm_interaction_barplot.png", plot = futureint, width = 10, height = 8, dpi = 300)
