geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
labs(
x = 'Chunk',
y = 'Predicted Probability of Choice',
title = '',
color = 'Social Condition', # Change legend title for lines
fill = 'Social Condition' # Change legend title for ribbon
) +
scale_color_manual(
values = c("1" = "#0073C2FF", "-1" = "#EFC000FF"), # Customize colors for lines
labels = c("Rejection", "Acceptance") # Rename legend items
) +
scale_fill_manual(
values = c("1" = "#0073C2FF", "-1" = "#EFC000FF"), # Customize colors for ribbons
labels = c("Rejection", "Acceptance") # Rename legend items
) +
theme_classic() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Add axis lines
panel.border = element_blank(), # Remove panel border
plot.background = element_blank(), # Remove plot background
panel.background = element_blank() # Remove panel background
)
ggplot(filtered_pred_data, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
labs(
x = 'Trials Over Time',
y = 'Predicted Probability of Choice',
title = '',
color = 'Social Condition', # Change legend title for lines
fill = 'Social Condition' # Change legend title for ribbon
) +
scale_color_manual(
values = c("1" = "#0073C2FF", "-1" = "#EFC000FF"), # Customize colors for lines
labels = c("Rejection", "Acceptance") # Rename legend items
) +
scale_fill_manual(
values = c("1" = "#0073C2FF", "-1" = "#EFC000FF"), # Customize colors for ribbons
labels = c("Rejection", "Acceptance") # Rename legend items
) +
theme_classic() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Add axis lines
panel.border = element_blank(), # Remove panel border
plot.background = element_blank(), # Remove plot background
panel.background = element_blank() # Remove panel background
)
ggplot(filtered_pred_data, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
labs(
x = 'Trials Over Time',
y = 'Predicted Probability of Self-Choice',
title = '',
color = 'Social Condition', # Change legend title for lines
fill = 'Social Condition' # Change legend title for ribbon
) +
scale_color_manual(
values = c("1" = "#0073C2FF", "-1" = "#EFC000FF"), # Customize colors for lines
labels = c("Rejection", "Acceptance") # Rename legend items
) +
scale_fill_manual(
values = c("1" = "#0073C2FF", "-1" = "#EFC000FF"), # Customize colors for ribbons
labels = c("Rejection", "Acceptance") # Rename legend items
) +
theme_classic() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Add axis lines
panel.border = element_blank(), # Remove panel border
plot.background = element_blank(), # Remove plot background
panel.background = element_blank() # Remove panel background
)
plot(exploratoryglm)
summary(exploratoryglm)
plot_model(exploratoryglm, type = 'pred')
# Generate prediction data using ggpredict
pred_data_exploratory <- ggpredict(exploratoryglm, terms = "aggregate_value")
# Generate prediction data using ggpredict
pred_data_exploratory <- ggpredict(exploratoryglm, terms = "aggregated_value")
# Plot the predictions using ggplot2
ggplot(pred_data_exploratory, aes(x = x, y = predicted)) +
geom_line(color = "#0073C2FF") +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2, fill = "#0073C2FF") +
labs(
x = 'Sub-Block Condition',
y = 'Predicted Probability of Self-Choice',
title = ''
) +
theme_classic() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Add axis lines
panel.border = element_blank(), # Remove panel border
plot.background = element_blank(), # Remove plot background
panel.background = element_blank() # Remove panel background
)
# Generate prediction data using ggpredict
pred_data_affectcondition_int <- ggpredict(glm5, terms = "recoded_stress", "condition_recode")
# Generate prediction data using ggpredict
pred_data_affectcondition_int <- ggpredict(glm5, terms = c("recoded_stress", "condition_recode")
# Plot the predictions using ggplot2
ggplot(pred_data_affectcondition_int, aes(x = x, y = predicted)) +
# Generate prediction data using ggpredict
pred_data_affectcondition_int <- ggpredict(glm5, terms = c("recoded_stress", "condition_recode")
# Plot the predictions using ggplot2
ggplot(pred_data_affectcondition_int, aes(x = x, y = predicted)) +
pred_data_affectcondition_int <- ggpredict(glm5, terms = c("recoded_stress", "condition_recode"))
# Plot the predictions using ggplot2 with custom colors and a single legend
ggplot(pred_data_affectcondition_int, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
labs(
x = 'Recoded Stress',
y = 'Predicted Probability of Self-Choice',
title = '',
color = 'Condition', # Change legend title for both lines and ribbons
fill = 'Condition' # Change legend title for both lines and ribbons
) +
scale_color_manual(
values = c("0" = "#0073C2FF", "1" = "#EFC000FF", "-1" = "#868686FF"), # Customize colors for lines
labels = c("Condition 0", "Condition 1", "Condition -1") # Rename legend items
) +
scale_fill_manual(
values = c("0" = "#0073C2FF", "1" = "#EFC000FF", "-1" = "#868686FF"), # Customize colors for ribbons
labels = c("Condition 0", "Condition 1", "Condition -1") # Rename legend items
) +
theme_classic() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Add axis lines
panel.border = element_blank(), # Remove panel border
plot.background = element_blank(), # Remove plot background
panel.background = element_blank() # Remove panel background
)
pred_data_affectcondition_int <- ggpredict(glm5, terms = c("recoded_stress:condition_recode"))
pred_data_affectcondition_int <- ggpredict(glm5, terms = c("recoded_stress*condition_recode"))
pred_data_affectcondition_int <- ggpredict(glm5, terms = c("recoded_stress [all]", "condition_recode"))
ggplot(pred_data_affectcondition_int, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
labs(
x = 'Recoded Stress',
y = 'Predicted Probability of Self-Choice',
title = '',
color = 'Condition', # Change legend title for both lines and ribbons
fill = 'Condition' # Change legend title for both lines and ribbons
) +
scale_color_manual(
values = c("0" = "#0073C2FF", "1" = "#EFC000FF", "-1" = "#868686FF"), # Customize colors for lines
labels = c("Condition 0", "Condition 1", "Condition -1") # Rename legend items
) +
scale_fill_manual(
values = c("0" = "#0073C2FF", "1" = "#EFC000FF", "-1" = "#868686FF"), # Customize colors for ribbons
labels = c("Condition 0", "Condition 1", "Condition -1") # Rename legend items
) +
theme_classic() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Add axis lines
panel.border = element_blank(), # Remove panel border
plot.background = element_blank(), # Remove plot background
panel.background = element_blank() # Remove panel background
)
ggplot(pred_data_affectcondition_int, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
labs(
x = 'Recoded Stress',
y = 'Predicted Probability of Self-Choice',
title = '',
color = 'Condition', # Change legend title for both lines and ribbons
fill = 'Condition' # Change legend title for both lines and ribbons
) +
scale_color_manual(
values = c("0" = "#0073C2FF", "1" = "#EFC000FF", "-1" = "#868686FF"), # Customize colors for lines
labels = c("Condition 0", "Condition 1", "Condition -1") # Rename legend items
) +
scale_fill_manual(
values = c("0" = "#0073C2FF", "1" = "#EFC000FF", "-1" = "#868686FF"), # Customize colors for ribbons
labels = c("Condition 0", "Condition 1", "Condition -1") # Rename legend items
) +
theme_classic() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Add axis lines
panel.border = element_blank(), # Remove panel border
plot.background = element_blank(), # Remove plot background
panel.background = element_blank() # Remove panel background
)
pred_data_affectcondition_int <- ggpredict(glm5, terms = c("recoded_stress [all]", "condition_recode [all]"))
# Plot the predictions using ggplot2 with custom colors and a single legend
ggplot(pred_data_affectcondition_int, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
labs(
x = 'Recoded Stress',
y = 'Predicted Probability of Self-Choice',
title = '',
color = 'Condition', # Change legend title for both lines and ribbons
fill = 'Condition' # Change legend title for both lines and ribbons
) +
scale_color_manual(
values = c("#0073C2FF", "#EFC000FF", "#868686FF"), # Customize colors for lines
labels = c("Condition 0", "Condition 1", "Condition -1") # Rename legend items
) +
scale_fill_manual(
values = c("#0073C2FF", "#EFC000FF", "#868686FF"), # Customize colors for ribbons
labels = c("Condition 0", "Condition 1", "Condition -1") # Rename legend items
) +
theme_classic() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Add axis lines
panel.border = element_blank(), # Remove panel border
plot.background = element_blank(), # Remove plot background
panel.background = element_blank() # Remove panel background
)
pred_data_affectcondition_int <- ggpredict(glm5, terms = c("recoded_stress [all]", "condition_recode [all]"))
# Plot the predictions using ggplot2 with custom colors and a single legend
ggplot(pred_data_affectcondition_int, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
labs(
x = 'Recoded Stress',
y = 'Predicted Probability of Self-Choice',
title = '',
color = 'Condition', # Change legend title for both lines and ribbons
fill = 'Condition' # Change legend title for both lines and ribbons
) +
scale_color_manual(
values = c("#0073C2FF", "#EFC000FF", "#868686FF"), # Customize colors for lines
labels = c("Condition 0", "Condition 1", "Condition -1") # Rename legend items
) +
scale_fill_manual(
values = c("#0073C2FF", "#EFC000FF", "#868686FF"), # Customize colors for ribbons
labels = c("Condition 0", "Condition 1", "Condition -1") # Rename legend items
) +
theme_classic() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Add axis lines
panel.border = element_blank(), # Remove panel border
plot.background = element_blank(), # Remove plot background
panel.background = element_blank() # Remove panel background
)
plot(glm5, type = "int")
plot_model(glm5, type ="int")
summary(glm5)
summary(glm4)
pred_data_affectcondition_int <- ggpredict(glm4, terms = c("recoded_stress [all]", "condition_recode [all]"))
# Plot the predictions using ggplot2 with custom colors and a single legend
ggplot(pred_data_affectcondition_int, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
labs(
x = 'Recoded Stress',
y = 'Predicted Probability of Self-Choice',
title = '',
color = 'Condition', # Change legend title for both lines and ribbons
fill = 'Condition' # Change legend title for both lines and ribbons
) +
scale_color_manual(
values = c("#0073C2FF", "#EFC000FF", "#868686FF"), # Customize colors for lines
labels = c("Condition 0", "Condition 1", "Condition -1") # Rename legend items
) +
scale_fill_manual(
values = c("#0073C2FF", "#EFC000FF", "#868686FF"), # Customize colors for ribbons
labels = c("Condition 0", "Condition 1", "Condition -1") # Rename legend items
) +
theme_classic() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Add axis lines
panel.border = element_blank(), # Remove panel border
plot.background = element_blank(), # Remove plot background
panel.background = element_blank() # Remove panel background
)
pred_data_affectcondition_int <- ggpredict(glm4, terms = c("recoded_stress [all]", "condition_recode [all]"))
# Plot the predictions using ggplot2 with custom colors and a single legend
ggplot(pred_data_affectcondition_int, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
labs(
x = 'Recoded Stress',
y = 'Predicted Probability of Self-Choice',
title = '',
color = 'Condition', # Change legend title for both lines and ribbons
fill = 'Condition' # Change legend title for both lines and ribbons
) +
scale_color_manual(
values = c("#0073C2FF", "#EFC000FF", "#868686FF"), # Customize colors for lines
labels = c("Condition 0", "Condition 1", "Condition -1") # Rename legend items
) +
scale_fill_manual(
values = c("#0073C2FF", "#EFC000FF", "#868686FF"), # Customize colors for ribbons
labels = c("Condition 0", "Condition 1", "Condition -1") # Rename legend items
) +
theme_classic() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Add axis lines
panel.border = element_blank(), # Remove panel border
plot.background = element_blank(), # Remove plot background
panel.background = element_blank() # Remove panel background
)
filtered_pred_data_affectcondition_int <- pred_data_affectcondition_int %>% filter(group != 0)
pred_data_affectcondition_int <- ggpredict(glm4, terms = c("recoded_stress [all]", "condition_recode [all]"))
# Plot the predictions using ggplot2 with custom colors and a single legend
ggplot(pred_data_affectcondition_int, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
labs(
x = 'Recoded Stress',
y = 'Predicted Probability of Self-Choice',
title = '',
color = 'Condition', # Change legend title for both lines and ribbons
fill = 'Condition' # Change legend title for both lines and ribbons
) +
scale_color_manual(
values = c("#0073C2FF", "#EFC000FF", "#868686FF"), # Customize colors for lines
labels = c("Condition 0", "Condition 1", "Condition -1") # Rename legend items
) +
scale_fill_manual(
values = c("#0073C2FF", "#EFC000FF", "#868686FF"), # Customize colors for ribbons
labels = c("Condition 0", "Condition 1", "Condition -1") # Rename legend items
) +
theme_classic() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Add axis lines
panel.border = element_blank(), # Remove panel border
plot.background = element_blank(), # Remove plot background
panel.background = element_blank() # Remove panel background
)
filtered_pred_data_affectcondition_int <- pred_data_affectcondition_int %>% filter(group != 0)
pred_data_affectcondition_int <- ggpredict(glm4, terms = c("recoded_stress [all]", "condition_recode [all]"))
# Plot the predictions using ggplot2 with custom colors and a single legend
ggplot(filtered_pred_data_affectcondition_int, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
labs(
x = 'Recoded Stress',
y = 'Predicted Probability of Self-Choice',
title = '',
color = 'Condition', # Change legend title for both lines and ribbons
fill = 'Condition' # Change legend title for both lines and ribbons
) +
scale_color_manual(
values = c("#0073C2FF", "#EFC000FF", "#868686FF"), # Customize colors for lines
labels = c("Condition 0", "Condition 1", "Condition -1") # Rename legend items
) +
scale_fill_manual(
values = c("#0073C2FF", "#EFC000FF", "#868686FF"), # Customize colors for ribbons
labels = c("Condition 0", "Condition 1", "Condition -1") # Rename legend items
) +
theme_classic() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Add axis lines
panel.border = element_blank(), # Remove panel border
plot.background = element_blank(), # Remove plot background
panel.background = element_blank() # Remove panel background
)
pred_data_affectcondition_int <- ggpredict(glm4, terms = c("recoded_stress [all]", "condition_recode [all]"))
# Plot the predictions using ggplot2 with custom colors and a single legend
ggplot(filtered_pred_data_affectcondition_int, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
labs(
x = 'Recoded Stress',
y = 'Predicted Probability of Self-Choice',
title = '',
color = 'Condition', # Change legend title for both lines and ribbons
fill = 'Condition' # Change legend title for both lines and ribbons
) +
scale_color_manual(
values = c("#0073C2FF", "#EFC000FF"), # Customize colors for lines
labels = c("Acceptance", "Rejection") # Rename legend items
) +
scale_fill_manual(
values = c("#0073C2FF", "#EFC000FF"), # Customize colors for ribbons
labels = c("Acceptance", "Rejection") # Rename legend items
) +
theme_classic() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Add axis lines
panel.border = element_blank(), # Remove panel border
plot.background = element_blank(), # Remove plot background
panel.background = element_blank() # Remove panel background
)
pred_data_affectcondition_int <- ggpredict(glm4, terms = c("recoded_stress [all]", "condition_recode [all]"))
# Plot the predictions using ggplot2 with custom colors and a single legend
ggplot(filtered_pred_data_affectcondition_int, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
labs(
x = 'Self-Reported Affect',
y = 'Predicted Probability of Self-Choice',
title = '',
color = 'Social Condition', # Change legend title for both lines and ribbons
fill = 'Social Condition' # Change legend title for both lines and ribbons
) +
scale_color_manual(
values = c("#0073C2FF", "#EFC000FF"), # Customize colors for lines
labels = c("Acceptance", "Rejection") # Rename legend items
) +
scale_fill_manual(
values = c("#0073C2FF", "#EFC000FF"), # Customize colors for ribbons
labels = c("Acceptance", "Rejection") # Rename legend items
) +
theme_classic() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Add axis lines
panel.border = element_blank(), # Remove panel border
plot.background = element_blank(), # Remove plot background
panel.background = element_blank() # Remove panel background
)
ggplot(filtered_pred_data, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
labs(
x = 'Trials Over Time',
y = 'Predicted Probability of Choice',
title = '',
color = 'Social Condition', # Change legend title for lines
fill = 'Social Condition' # Change legend title for ribbon
) +
scale_color_manual(
values = c("1" = "#0073C2FF", "-1" = "#EFC000FF"), # Customize colors for lines
labels = c("Rejection", "Acceptance") # Rename legend items
) +
scale_fill_manual(
values = c("1" = "#0073C2FF", "-1" = "#EFC000FF"), # Customize colors for ribbons
labels = c("Rejection", "Acceptance") # Rename legend items
) +
theme_classic() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Add axis lines
panel.border = element_blank(), # Remove panel border
plot.background = element_blank(), # Remove plot background
panel.background = element_blank() # Remove panel background
)
ggplot(filtered_pred_data, aes(x = x, y = predicted, color = group, fill = group)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
labs(
x = 'Trials Over Time',
y = 'Predicted Probability of Choice',
title = '',
color = 'Social Condition', # Change legend title for lines
fill = 'Social Condition' # Change legend title for ribbon
) +
scale_color_manual(
values = c("1" = "#0073C2FF", "-1" = "#EFC000FF"), # Customize colors for lines
labels = c("Acceptance", "Rejection") # Rename legend items
) +
scale_fill_manual(
values = c("1" = "#0073C2FF", "-1" = "#EFC000FF"), # Customize colors for ribbons
labels = c("Acceptance", "Rejection") # Rename legend items
) +
theme_classic() +
theme(
panel.grid.major = element_blank(), # Remove major grid lines
panel.grid.minor = element_blank(), # Remove minor grid lines
axis.line = element_line(color = "black"), # Add axis lines
panel.border = element_blank(), # Remove panel border
plot.background = element_blank(), # Remove plot background
panel.background = element_blank() # Remove panel background
)
summary(learningglm)
summary(learningmodel)
learningglm2 <- glm(choice~chunk*condition_recode,family=binomial,data=learningdata)
summary(learningglm2)
View(learningdata)
View(learningdata)
learningglm2_noint <- glm(choice~chunk + condition_recode,family=binomial,data=learningdata)
summary(learningglm2_noint)
summary(glm2)
summary(glm1)
glm(4)
summary(glm4)
summary(glm5)
summary(glm1)
summary(glm2)
summary(glm3)
summary(lm)
summary(lm2)
summary(lm3)
save.image("~/Documents/GitHub/Rejection_Choice/8_8workshpace.RData")
